/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.facebook.research.asynchronousratchetingtree.art.message.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class UpdateMessageStruct implements TBase, java.io.Serializable, Cloneable, Comparable<UpdateMessageStruct> {
  private static final TStruct STRUCT_DESC = new TStruct("UpdateMessageStruct");
  private static final TField LEAF_NUM_FIELD_DESC = new TField("leafNum", TType.I32, (short)1);
  private static final TField PATH_FIELD_DESC = new TField("path", TType.LIST, (short)2);

  public int leafNum;
  public List<String> path;
  public static final int LEAFNUM = 1;
  public static final int PATH = 2;
  public static boolean DEFAULT_PRETTY_PRINT = true;

  // isset id assignments
  private static final int __LEAFNUM_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<Integer, FieldMetaData> metaDataMap;
  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(LEAFNUM, new FieldMetaData("leafNum", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(PATH, new FieldMetaData("path", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new FieldValueMetaData(TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(UpdateMessageStruct.class, metaDataMap);
  }

  public UpdateMessageStruct() {
  }

  public UpdateMessageStruct(
    int leafNum,
    List<String> path)
  {
    this();
    this.leafNum = leafNum;
    setLeafNumIsSet(true);
    this.path = path;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UpdateMessageStruct(UpdateMessageStruct other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.leafNum = TBaseHelper.deepCopy(other.leafNum);
    if (other.isSetPath()) {
      this.path = TBaseHelper.deepCopy(other.path);
    }
  }

  public UpdateMessageStruct deepCopy() {
    return new UpdateMessageStruct(this);
  }

  @Deprecated
  public UpdateMessageStruct clone() {
    return new UpdateMessageStruct(this);
  }

  public int  getLeafNum() {
    return this.leafNum;
  }

  public UpdateMessageStruct setLeafNum(int leafNum) {
    this.leafNum = leafNum;
    setLeafNumIsSet(true);
    return this;
  }

  public void unsetLeafNum() {
    __isset_bit_vector.clear(__LEAFNUM_ISSET_ID);
  }

  // Returns true if field leafNum is set (has been assigned a value) and false otherwise
  public boolean isSetLeafNum() {
    return __isset_bit_vector.get(__LEAFNUM_ISSET_ID);
  }

  public void setLeafNumIsSet(boolean value) {
    __isset_bit_vector.set(__LEAFNUM_ISSET_ID, value);
  }

  public List<String>  getPath() {
    return this.path;
  }

  public UpdateMessageStruct setPath(List<String> path) {
    this.path = path;
    return this;
  }

  public void unsetPath() {
    this.path = null;
  }

  // Returns true if field path is set (has been assigned a value) and false otherwise
  public boolean isSetPath() {
    return this.path != null;
  }

  public void setPathIsSet(boolean value) {
    if (!value) {
      this.path = null;
    }
  }

  @SuppressWarnings("unchecked")
  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case LEAFNUM:
      if (value == null) {
        unsetLeafNum();
      } else {
        setLeafNum((Integer)value);
      }
      break;

    case PATH:
      if (value == null) {
        unsetPath();
      } else {
        setPath((List<String>)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case LEAFNUM:
      return new Integer(getLeafNum());

    case PATH:
      return getPath();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case LEAFNUM:
      return isSetLeafNum();
    case PATH:
      return isSetPath();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UpdateMessageStruct)
      return this.equals((UpdateMessageStruct)that);
    return false;
  }

  public boolean equals(UpdateMessageStruct that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_leafNum = true;
    boolean that_present_leafNum = true;
    if (this_present_leafNum || that_present_leafNum) {
      if (!(this_present_leafNum && that_present_leafNum))
        return false;
      if (!TBaseHelper.equalsNobinary(this.leafNum, that.leafNum))
        return false;
    }

    boolean this_present_path = true && this.isSetPath();
    boolean that_present_path = true && that.isSetPath();
    if (this_present_path || that_present_path) {
      if (!(this_present_path && that_present_path))
        return false;
      if (!TBaseHelper.equalsNobinary(this.path, that.path))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(UpdateMessageStruct other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetLeafNum()).compareTo(other.isSetLeafNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(leafNum, other.leafNum);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetPath()).compareTo(other.isSetPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(path, other.path);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case LEAFNUM:
          if (field.type == TType.I32) {
            this.leafNum = iprot.readI32();
            setLeafNumIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PATH:
          if (field.type == TType.LIST) {
            {
              TList _list9 = iprot.readListBegin();
              this.path = new ArrayList<String>(Math.max(0, _list9.size));
              for (int _i10 = 0; 
                   (_list9.size < 0) ? iprot.peekList() : (_i10 < _list9.size); 
                   ++_i10)
              {
                String _elem11;
                _elem11 = iprot.readString();
                this.path.add(_elem11);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(LEAF_NUM_FIELD_DESC);
    oprot.writeI32(this.leafNum);
    oprot.writeFieldEnd();
    if (this.path != null) {
      oprot.writeFieldBegin(PATH_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRING, this.path.size()));
        for (String _iter12 : this.path)        {
          oprot.writeString(_iter12);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("UpdateMessageStruct");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("leafNum");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getLeafNum(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("path");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getPath() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getPath(), indent + 1, prettyPrint));
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

