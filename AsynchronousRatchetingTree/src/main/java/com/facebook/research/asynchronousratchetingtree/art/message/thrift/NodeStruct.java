/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.facebook.research.asynchronousratchetingtree.art.message.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class NodeStruct implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("NodeStruct");
  private static final TField PUBLIC_KEY_FIELD_DESC = new TField("publicKey", TType.STRING, (short)1);
  private static final TField LEFT_FIELD_DESC = new TField("left", TType.STRUCT, (short)2);
  private static final TField RIGHT_FIELD_DESC = new TField("right", TType.STRUCT, (short)3);

  public byte[] publicKey;
  public NodeStruct left;
  public NodeStruct right;
  public static final int PUBLICKEY = 1;
  public static final int LEFT = 2;
  public static final int RIGHT = 3;
  public static boolean DEFAULT_PRETTY_PRINT = true;

  // isset id assignments

  public static final Map<Integer, FieldMetaData> metaDataMap;
  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(PUBLICKEY, new FieldMetaData("publicKey", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMetaDataMap.put(LEFT, new FieldMetaData("left", TFieldRequirementType.OPTIONAL, 
        new StructMetaData(TType.STRUCT, NodeStruct.class)));
    tmpMetaDataMap.put(RIGHT, new FieldMetaData("right", TFieldRequirementType.OPTIONAL, 
        new StructMetaData(TType.STRUCT, NodeStruct.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(NodeStruct.class, metaDataMap);
  }

  public NodeStruct() {
  }

  public NodeStruct(
    byte[] publicKey)
  {
    this();
    this.publicKey = publicKey;
  }

  public NodeStruct(
    byte[] publicKey,
    NodeStruct left,
    NodeStruct right)
  {
    this();
    this.publicKey = publicKey;
    this.left = left;
    this.right = right;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NodeStruct(NodeStruct other) {
    if (other.isSetPublicKey()) {
      this.publicKey = TBaseHelper.deepCopy(other.publicKey);
    }
    if (other.isSetLeft()) {
      this.left = TBaseHelper.deepCopy(other.left);
    }
    if (other.isSetRight()) {
      this.right = TBaseHelper.deepCopy(other.right);
    }
  }

  public NodeStruct deepCopy() {
    return new NodeStruct(this);
  }

  @Deprecated
  public NodeStruct clone() {
    return new NodeStruct(this);
  }

  public byte[]  getPublicKey() {
    return this.publicKey;
  }

  public NodeStruct setPublicKey(byte[] publicKey) {
    this.publicKey = publicKey;
    return this;
  }

  public void unsetPublicKey() {
    this.publicKey = null;
  }

  // Returns true if field publicKey is set (has been assigned a value) and false otherwise
  public boolean isSetPublicKey() {
    return this.publicKey != null;
  }

  public void setPublicKeyIsSet(boolean value) {
    if (!value) {
      this.publicKey = null;
    }
  }

  public NodeStruct  getLeft() {
    return this.left;
  }

  public NodeStruct setLeft(NodeStruct left) {
    this.left = left;
    return this;
  }

  public void unsetLeft() {
    this.left = null;
  }

  // Returns true if field left is set (has been assigned a value) and false otherwise
  public boolean isSetLeft() {
    return this.left != null;
  }

  public void setLeftIsSet(boolean value) {
    if (!value) {
      this.left = null;
    }
  }

  public NodeStruct  getRight() {
    return this.right;
  }

  public NodeStruct setRight(NodeStruct right) {
    this.right = right;
    return this;
  }

  public void unsetRight() {
    this.right = null;
  }

  // Returns true if field right is set (has been assigned a value) and false otherwise
  public boolean isSetRight() {
    return this.right != null;
  }

  public void setRightIsSet(boolean value) {
    if (!value) {
      this.right = null;
    }
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case PUBLICKEY:
      if (value == null) {
        unsetPublicKey();
      } else {
        setPublicKey((byte[])value);
      }
      break;

    case LEFT:
      if (value == null) {
        unsetLeft();
      } else {
        setLeft((NodeStruct)value);
      }
      break;

    case RIGHT:
      if (value == null) {
        unsetRight();
      } else {
        setRight((NodeStruct)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case PUBLICKEY:
      return getPublicKey();

    case LEFT:
      return getLeft();

    case RIGHT:
      return getRight();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case PUBLICKEY:
      return isSetPublicKey();
    case LEFT:
      return isSetLeft();
    case RIGHT:
      return isSetRight();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof NodeStruct)
      return this.equals((NodeStruct)that);
    return false;
  }

  public boolean equals(NodeStruct that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_publicKey = true && this.isSetPublicKey();
    boolean that_present_publicKey = true && that.isSetPublicKey();
    if (this_present_publicKey || that_present_publicKey) {
      if (!(this_present_publicKey && that_present_publicKey))
        return false;
      if (!TBaseHelper.equalsSlow(this.publicKey, that.publicKey))
        return false;
    }

    boolean this_present_left = true && this.isSetLeft();
    boolean that_present_left = true && that.isSetLeft();
    if (this_present_left || that_present_left) {
      if (!(this_present_left && that_present_left))
        return false;
      if (!TBaseHelper.equalsNobinary(this.left, that.left))
        return false;
    }

    boolean this_present_right = true && this.isSetRight();
    boolean that_present_right = true && that.isSetRight();
    if (this_present_right || that_present_right) {
      if (!(this_present_right && that_present_right))
        return false;
      if (!TBaseHelper.equalsNobinary(this.right, that.right))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case PUBLICKEY:
          if (field.type == TType.STRING) {
            this.publicKey = iprot.readBinary();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case LEFT:
          if (field.type == TType.STRUCT) {
            this.left = new NodeStruct();
            this.left.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case RIGHT:
          if (field.type == TType.STRUCT) {
            this.right = new NodeStruct();
            this.right.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.publicKey != null) {
      oprot.writeFieldBegin(PUBLIC_KEY_FIELD_DESC);
      oprot.writeBinary(this.publicKey);
      oprot.writeFieldEnd();
    }
    if (this.left != null) {
      if (isSetLeft()) {
        oprot.writeFieldBegin(LEFT_FIELD_DESC);
        this.left.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (this.right != null) {
      if (isSetRight()) {
        oprot.writeFieldBegin(RIGHT_FIELD_DESC);
        this.right.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("NodeStruct");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("publicKey");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getPublicKey() == null) {
      sb.append("null");
    } else {
        int __publicKey_size = Math.min(this. getPublicKey().length, 128);
        for (int i = 0; i < __publicKey_size; i++) {
          if (i != 0) sb.append(" ");
          sb.append(Integer.toHexString(this. getPublicKey()[i]).length() > 1 ? Integer.toHexString(this. getPublicKey()[i]).substring(Integer.toHexString(this. getPublicKey()[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this. getPublicKey()[i]).toUpperCase());
        }
        if (this. getPublicKey().length > 128) sb.append(" ...");
    }
    first = false;
    if (isSetLeft())
    {
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("left");
      sb.append(space);
      sb.append(":").append(space);
      if (this. getLeft() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this. getLeft(), indent + 1, prettyPrint));
      }
      first = false;
    }
    if (isSetRight())
    {
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("right");
      sb.append(space);
      sb.append(":").append(space);
      if (this. getRight() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this. getRight(), indent + 1, prettyPrint));
      }
      first = false;
    }
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

