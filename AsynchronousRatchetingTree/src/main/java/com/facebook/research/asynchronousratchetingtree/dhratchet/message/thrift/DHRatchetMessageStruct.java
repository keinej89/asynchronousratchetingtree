/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.facebook.research.asynchronousratchetingtree.dhratchet.message.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class DHRatchetMessageStruct implements TBase, java.io.Serializable, Cloneable, Comparable<DHRatchetMessageStruct> {
  private static final TStruct STRUCT_DESC = new TStruct("DHRatchetMessageStruct");
  private static final TField PEER_NUM_FIELD_DESC = new TField("peerNum", TType.I32, (short)1);
  private static final TField RATCHET_KEY_FIELD_DESC = new TField("ratchetKey", TType.STRING, (short)2);
  private static final TField CIPHERTEXT_FIELD_DESC = new TField("ciphertext", TType.STRING, (short)3);

  public int peerNum;
  public byte[] ratchetKey;
  public byte[] ciphertext;
  public static final int PEERNUM = 1;
  public static final int RATCHETKEY = 2;
  public static final int CIPHERTEXT = 3;
  public static boolean DEFAULT_PRETTY_PRINT = true;

  // isset id assignments
  private static final int __PEERNUM_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<Integer, FieldMetaData> metaDataMap;
  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(PEERNUM, new FieldMetaData("peerNum", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(RATCHETKEY, new FieldMetaData("ratchetKey", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMetaDataMap.put(CIPHERTEXT, new FieldMetaData("ciphertext", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(DHRatchetMessageStruct.class, metaDataMap);
  }

  public DHRatchetMessageStruct() {
  }

  public DHRatchetMessageStruct(
    int peerNum,
    byte[] ratchetKey,
    byte[] ciphertext)
  {
    this();
    this.peerNum = peerNum;
    setPeerNumIsSet(true);
    this.ratchetKey = ratchetKey;
    this.ciphertext = ciphertext;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DHRatchetMessageStruct(DHRatchetMessageStruct other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.peerNum = TBaseHelper.deepCopy(other.peerNum);
    if (other.isSetRatchetKey()) {
      this.ratchetKey = TBaseHelper.deepCopy(other.ratchetKey);
    }
    if (other.isSetCiphertext()) {
      this.ciphertext = TBaseHelper.deepCopy(other.ciphertext);
    }
  }

  public DHRatchetMessageStruct deepCopy() {
    return new DHRatchetMessageStruct(this);
  }

  @Deprecated
  public DHRatchetMessageStruct clone() {
    return new DHRatchetMessageStruct(this);
  }

  public int  getPeerNum() {
    return this.peerNum;
  }

  public DHRatchetMessageStruct setPeerNum(int peerNum) {
    this.peerNum = peerNum;
    setPeerNumIsSet(true);
    return this;
  }

  public void unsetPeerNum() {
    __isset_bit_vector.clear(__PEERNUM_ISSET_ID);
  }

  // Returns true if field peerNum is set (has been assigned a value) and false otherwise
  public boolean isSetPeerNum() {
    return __isset_bit_vector.get(__PEERNUM_ISSET_ID);
  }

  public void setPeerNumIsSet(boolean value) {
    __isset_bit_vector.set(__PEERNUM_ISSET_ID, value);
  }

  public byte[]  getRatchetKey() {
    return this.ratchetKey;
  }

  public DHRatchetMessageStruct setRatchetKey(byte[] ratchetKey) {
    this.ratchetKey = ratchetKey;
    return this;
  }

  public void unsetRatchetKey() {
    this.ratchetKey = null;
  }

  // Returns true if field ratchetKey is set (has been assigned a value) and false otherwise
  public boolean isSetRatchetKey() {
    return this.ratchetKey != null;
  }

  public void setRatchetKeyIsSet(boolean value) {
    if (!value) {
      this.ratchetKey = null;
    }
  }

  public byte[]  getCiphertext() {
    return this.ciphertext;
  }

  public DHRatchetMessageStruct setCiphertext(byte[] ciphertext) {
    this.ciphertext = ciphertext;
    return this;
  }

  public void unsetCiphertext() {
    this.ciphertext = null;
  }

  // Returns true if field ciphertext is set (has been assigned a value) and false otherwise
  public boolean isSetCiphertext() {
    return this.ciphertext != null;
  }

  public void setCiphertextIsSet(boolean value) {
    if (!value) {
      this.ciphertext = null;
    }
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case PEERNUM:
      if (value == null) {
        unsetPeerNum();
      } else {
        setPeerNum((Integer)value);
      }
      break;

    case RATCHETKEY:
      if (value == null) {
        unsetRatchetKey();
      } else {
        setRatchetKey((byte[])value);
      }
      break;

    case CIPHERTEXT:
      if (value == null) {
        unsetCiphertext();
      } else {
        setCiphertext((byte[])value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case PEERNUM:
      return new Integer(getPeerNum());

    case RATCHETKEY:
      return getRatchetKey();

    case CIPHERTEXT:
      return getCiphertext();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case PEERNUM:
      return isSetPeerNum();
    case RATCHETKEY:
      return isSetRatchetKey();
    case CIPHERTEXT:
      return isSetCiphertext();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DHRatchetMessageStruct)
      return this.equals((DHRatchetMessageStruct)that);
    return false;
  }

  public boolean equals(DHRatchetMessageStruct that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_peerNum = true;
    boolean that_present_peerNum = true;
    if (this_present_peerNum || that_present_peerNum) {
      if (!(this_present_peerNum && that_present_peerNum))
        return false;
      if (!TBaseHelper.equalsNobinary(this.peerNum, that.peerNum))
        return false;
    }

    boolean this_present_ratchetKey = true && this.isSetRatchetKey();
    boolean that_present_ratchetKey = true && that.isSetRatchetKey();
    if (this_present_ratchetKey || that_present_ratchetKey) {
      if (!(this_present_ratchetKey && that_present_ratchetKey))
        return false;
      if (!TBaseHelper.equalsSlow(this.ratchetKey, that.ratchetKey))
        return false;
    }

    boolean this_present_ciphertext = true && this.isSetCiphertext();
    boolean that_present_ciphertext = true && that.isSetCiphertext();
    if (this_present_ciphertext || that_present_ciphertext) {
      if (!(this_present_ciphertext && that_present_ciphertext))
        return false;
      if (!TBaseHelper.equalsSlow(this.ciphertext, that.ciphertext))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(DHRatchetMessageStruct other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPeerNum()).compareTo(other.isSetPeerNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(peerNum, other.peerNum);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetRatchetKey()).compareTo(other.isSetRatchetKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(ratchetKey, other.ratchetKey);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetCiphertext()).compareTo(other.isSetCiphertext());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(ciphertext, other.ciphertext);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case PEERNUM:
          if (field.type == TType.I32) {
            this.peerNum = iprot.readI32();
            setPeerNumIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case RATCHETKEY:
          if (field.type == TType.STRING) {
            this.ratchetKey = iprot.readBinary();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CIPHERTEXT:
          if (field.type == TType.STRING) {
            this.ciphertext = iprot.readBinary();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(PEER_NUM_FIELD_DESC);
    oprot.writeI32(this.peerNum);
    oprot.writeFieldEnd();
    if (this.ratchetKey != null) {
      oprot.writeFieldBegin(RATCHET_KEY_FIELD_DESC);
      oprot.writeBinary(this.ratchetKey);
      oprot.writeFieldEnd();
    }
    if (this.ciphertext != null) {
      oprot.writeFieldBegin(CIPHERTEXT_FIELD_DESC);
      oprot.writeBinary(this.ciphertext);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("DHRatchetMessageStruct");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("peerNum");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getPeerNum(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("ratchetKey");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getRatchetKey() == null) {
      sb.append("null");
    } else {
        int __ratchetKey_size = Math.min(this. getRatchetKey().length, 128);
        for (int i = 0; i < __ratchetKey_size; i++) {
          if (i != 0) sb.append(" ");
          sb.append(Integer.toHexString(this. getRatchetKey()[i]).length() > 1 ? Integer.toHexString(this. getRatchetKey()[i]).substring(Integer.toHexString(this. getRatchetKey()[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this. getRatchetKey()[i]).toUpperCase());
        }
        if (this. getRatchetKey().length > 128) sb.append(" ...");
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("ciphertext");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getCiphertext() == null) {
      sb.append("null");
    } else {
        int __ciphertext_size = Math.min(this. getCiphertext().length, 128);
        for (int i = 0; i < __ciphertext_size; i++) {
          if (i != 0) sb.append(" ");
          sb.append(Integer.toHexString(this. getCiphertext()[i]).length() > 1 ? Integer.toHexString(this. getCiphertext()[i]).substring(Integer.toHexString(this. getCiphertext()[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this. getCiphertext()[i]).toUpperCase());
        }
        if (this. getCiphertext().length > 128) sb.append(" ...");
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

