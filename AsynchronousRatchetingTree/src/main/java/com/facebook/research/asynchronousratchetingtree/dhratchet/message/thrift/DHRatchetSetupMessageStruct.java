/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.facebook.research.asynchronousratchetingtree.dhratchet.message.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class DHRatchetSetupMessageStruct implements TBase, java.io.Serializable, Cloneable, Comparable<DHRatchetSetupMessageStruct> {
  private static final TStruct STRUCT_DESC = new TStruct("DHRatchetSetupMessageStruct");
  private static final TField PEER_NUM_FIELD_DESC = new TField("peerNum", TType.I32, (short)1);
  private static final TField IDENTITY_KEY_FIELD_DESC = new TField("identityKey", TType.STRING, (short)2);
  private static final TField EPHEMERAL_KEY_FIELD_DESC = new TField("ephemeralKey", TType.STRING, (short)3);

  public int peerNum;
  public byte[] identityKey;
  public byte[] ephemeralKey;
  public static final int PEERNUM = 1;
  public static final int IDENTITYKEY = 2;
  public static final int EPHEMERALKEY = 3;
  public static boolean DEFAULT_PRETTY_PRINT = true;

  // isset id assignments
  private static final int __PEERNUM_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<Integer, FieldMetaData> metaDataMap;
  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(PEERNUM, new FieldMetaData("peerNum", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(IDENTITYKEY, new FieldMetaData("identityKey", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMetaDataMap.put(EPHEMERALKEY, new FieldMetaData("ephemeralKey", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(DHRatchetSetupMessageStruct.class, metaDataMap);
  }

  public DHRatchetSetupMessageStruct() {
  }

  public DHRatchetSetupMessageStruct(
    int peerNum,
    byte[] identityKey,
    byte[] ephemeralKey)
  {
    this();
    this.peerNum = peerNum;
    setPeerNumIsSet(true);
    this.identityKey = identityKey;
    this.ephemeralKey = ephemeralKey;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DHRatchetSetupMessageStruct(DHRatchetSetupMessageStruct other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.peerNum = TBaseHelper.deepCopy(other.peerNum);
    if (other.isSetIdentityKey()) {
      this.identityKey = TBaseHelper.deepCopy(other.identityKey);
    }
    if (other.isSetEphemeralKey()) {
      this.ephemeralKey = TBaseHelper.deepCopy(other.ephemeralKey);
    }
  }

  public DHRatchetSetupMessageStruct deepCopy() {
    return new DHRatchetSetupMessageStruct(this);
  }

  @Deprecated
  public DHRatchetSetupMessageStruct clone() {
    return new DHRatchetSetupMessageStruct(this);
  }

  public int  getPeerNum() {
    return this.peerNum;
  }

  public DHRatchetSetupMessageStruct setPeerNum(int peerNum) {
    this.peerNum = peerNum;
    setPeerNumIsSet(true);
    return this;
  }

  public void unsetPeerNum() {
    __isset_bit_vector.clear(__PEERNUM_ISSET_ID);
  }

  // Returns true if field peerNum is set (has been assigned a value) and false otherwise
  public boolean isSetPeerNum() {
    return __isset_bit_vector.get(__PEERNUM_ISSET_ID);
  }

  public void setPeerNumIsSet(boolean value) {
    __isset_bit_vector.set(__PEERNUM_ISSET_ID, value);
  }

  public byte[]  getIdentityKey() {
    return this.identityKey;
  }

  public DHRatchetSetupMessageStruct setIdentityKey(byte[] identityKey) {
    this.identityKey = identityKey;
    return this;
  }

  public void unsetIdentityKey() {
    this.identityKey = null;
  }

  // Returns true if field identityKey is set (has been assigned a value) and false otherwise
  public boolean isSetIdentityKey() {
    return this.identityKey != null;
  }

  public void setIdentityKeyIsSet(boolean value) {
    if (!value) {
      this.identityKey = null;
    }
  }

  public byte[]  getEphemeralKey() {
    return this.ephemeralKey;
  }

  public DHRatchetSetupMessageStruct setEphemeralKey(byte[] ephemeralKey) {
    this.ephemeralKey = ephemeralKey;
    return this;
  }

  public void unsetEphemeralKey() {
    this.ephemeralKey = null;
  }

  // Returns true if field ephemeralKey is set (has been assigned a value) and false otherwise
  public boolean isSetEphemeralKey() {
    return this.ephemeralKey != null;
  }

  public void setEphemeralKeyIsSet(boolean value) {
    if (!value) {
      this.ephemeralKey = null;
    }
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case PEERNUM:
      if (value == null) {
        unsetPeerNum();
      } else {
        setPeerNum((Integer)value);
      }
      break;

    case IDENTITYKEY:
      if (value == null) {
        unsetIdentityKey();
      } else {
        setIdentityKey((byte[])value);
      }
      break;

    case EPHEMERALKEY:
      if (value == null) {
        unsetEphemeralKey();
      } else {
        setEphemeralKey((byte[])value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case PEERNUM:
      return new Integer(getPeerNum());

    case IDENTITYKEY:
      return getIdentityKey();

    case EPHEMERALKEY:
      return getEphemeralKey();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case PEERNUM:
      return isSetPeerNum();
    case IDENTITYKEY:
      return isSetIdentityKey();
    case EPHEMERALKEY:
      return isSetEphemeralKey();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DHRatchetSetupMessageStruct)
      return this.equals((DHRatchetSetupMessageStruct)that);
    return false;
  }

  public boolean equals(DHRatchetSetupMessageStruct that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_peerNum = true;
    boolean that_present_peerNum = true;
    if (this_present_peerNum || that_present_peerNum) {
      if (!(this_present_peerNum && that_present_peerNum))
        return false;
      if (!TBaseHelper.equalsNobinary(this.peerNum, that.peerNum))
        return false;
    }

    boolean this_present_identityKey = true && this.isSetIdentityKey();
    boolean that_present_identityKey = true && that.isSetIdentityKey();
    if (this_present_identityKey || that_present_identityKey) {
      if (!(this_present_identityKey && that_present_identityKey))
        return false;
      if (!TBaseHelper.equalsSlow(this.identityKey, that.identityKey))
        return false;
    }

    boolean this_present_ephemeralKey = true && this.isSetEphemeralKey();
    boolean that_present_ephemeralKey = true && that.isSetEphemeralKey();
    if (this_present_ephemeralKey || that_present_ephemeralKey) {
      if (!(this_present_ephemeralKey && that_present_ephemeralKey))
        return false;
      if (!TBaseHelper.equalsSlow(this.ephemeralKey, that.ephemeralKey))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(DHRatchetSetupMessageStruct other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPeerNum()).compareTo(other.isSetPeerNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(peerNum, other.peerNum);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetIdentityKey()).compareTo(other.isSetIdentityKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(identityKey, other.identityKey);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetEphemeralKey()).compareTo(other.isSetEphemeralKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(ephemeralKey, other.ephemeralKey);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case PEERNUM:
          if (field.type == TType.I32) {
            this.peerNum = iprot.readI32();
            setPeerNumIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case IDENTITYKEY:
          if (field.type == TType.STRING) {
            this.identityKey = iprot.readBinary();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case EPHEMERALKEY:
          if (field.type == TType.STRING) {
            this.ephemeralKey = iprot.readBinary();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(PEER_NUM_FIELD_DESC);
    oprot.writeI32(this.peerNum);
    oprot.writeFieldEnd();
    if (this.identityKey != null) {
      oprot.writeFieldBegin(IDENTITY_KEY_FIELD_DESC);
      oprot.writeBinary(this.identityKey);
      oprot.writeFieldEnd();
    }
    if (this.ephemeralKey != null) {
      oprot.writeFieldBegin(EPHEMERAL_KEY_FIELD_DESC);
      oprot.writeBinary(this.ephemeralKey);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("DHRatchetSetupMessageStruct");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("peerNum");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getPeerNum(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("identityKey");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getIdentityKey() == null) {
      sb.append("null");
    } else {
        int __identityKey_size = Math.min(this. getIdentityKey().length, 128);
        for (int i = 0; i < __identityKey_size; i++) {
          if (i != 0) sb.append(" ");
          sb.append(Integer.toHexString(this. getIdentityKey()[i]).length() > 1 ? Integer.toHexString(this. getIdentityKey()[i]).substring(Integer.toHexString(this. getIdentityKey()[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this. getIdentityKey()[i]).toUpperCase());
        }
        if (this. getIdentityKey().length > 128) sb.append(" ...");
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("ephemeralKey");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getEphemeralKey() == null) {
      sb.append("null");
    } else {
        int __ephemeralKey_size = Math.min(this. getEphemeralKey().length, 128);
        for (int i = 0; i < __ephemeralKey_size; i++) {
          if (i != 0) sb.append(" ");
          sb.append(Integer.toHexString(this. getEphemeralKey()[i]).length() > 1 ? Integer.toHexString(this. getEphemeralKey()[i]).substring(Integer.toHexString(this. getEphemeralKey()[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this. getEphemeralKey()[i]).toUpperCase());
        }
        if (this. getEphemeralKey().length > 128) sb.append(" ...");
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

