/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.facebook.research.asynchronousratchetingtree.art.message.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class CiphertextMessageStruct implements TBase, java.io.Serializable, Cloneable, Comparable<CiphertextMessageStruct> {
  private static final TStruct STRUCT_DESC = new TStruct("CiphertextMessageStruct");
  private static final TField AUTHENTICATED_MESSAGE_FIELD_DESC = new TField("authenticatedMessage", TType.STRUCT, (short)1);
  private static final TField CIPHERTEXT_FIELD_DESC = new TField("ciphertext", TType.STRING, (short)2);

  public AuthenticatedMessageStruct authenticatedMessage;
  public byte[] ciphertext;
  public static final int AUTHENTICATEDMESSAGE = 1;
  public static final int CIPHERTEXT = 2;
  public static boolean DEFAULT_PRETTY_PRINT = true;

  // isset id assignments

  public static final Map<Integer, FieldMetaData> metaDataMap;
  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(AUTHENTICATEDMESSAGE, new FieldMetaData("authenticatedMessage", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, AuthenticatedMessageStruct.class)));
    tmpMetaDataMap.put(CIPHERTEXT, new FieldMetaData("ciphertext", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(CiphertextMessageStruct.class, metaDataMap);
  }

  public CiphertextMessageStruct() {
  }

  public CiphertextMessageStruct(
    AuthenticatedMessageStruct authenticatedMessage,
    byte[] ciphertext)
  {
    this();
    this.authenticatedMessage = authenticatedMessage;
    this.ciphertext = ciphertext;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CiphertextMessageStruct(CiphertextMessageStruct other) {
    if (other.isSetAuthenticatedMessage()) {
      this.authenticatedMessage = TBaseHelper.deepCopy(other.authenticatedMessage);
    }
    if (other.isSetCiphertext()) {
      this.ciphertext = TBaseHelper.deepCopy(other.ciphertext);
    }
  }

  public CiphertextMessageStruct deepCopy() {
    return new CiphertextMessageStruct(this);
  }

  @Deprecated
  public CiphertextMessageStruct clone() {
    return new CiphertextMessageStruct(this);
  }

  public AuthenticatedMessageStruct  getAuthenticatedMessage() {
    return this.authenticatedMessage;
  }

  public CiphertextMessageStruct setAuthenticatedMessage(AuthenticatedMessageStruct authenticatedMessage) {
    this.authenticatedMessage = authenticatedMessage;
    return this;
  }

  public void unsetAuthenticatedMessage() {
    this.authenticatedMessage = null;
  }

  // Returns true if field authenticatedMessage is set (has been assigned a value) and false otherwise
  public boolean isSetAuthenticatedMessage() {
    return this.authenticatedMessage != null;
  }

  public void setAuthenticatedMessageIsSet(boolean value) {
    if (!value) {
      this.authenticatedMessage = null;
    }
  }

  public byte[]  getCiphertext() {
    return this.ciphertext;
  }

  public CiphertextMessageStruct setCiphertext(byte[] ciphertext) {
    this.ciphertext = ciphertext;
    return this;
  }

  public void unsetCiphertext() {
    this.ciphertext = null;
  }

  // Returns true if field ciphertext is set (has been assigned a value) and false otherwise
  public boolean isSetCiphertext() {
    return this.ciphertext != null;
  }

  public void setCiphertextIsSet(boolean value) {
    if (!value) {
      this.ciphertext = null;
    }
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case AUTHENTICATEDMESSAGE:
      if (value == null) {
        unsetAuthenticatedMessage();
      } else {
        setAuthenticatedMessage((AuthenticatedMessageStruct)value);
      }
      break;

    case CIPHERTEXT:
      if (value == null) {
        unsetCiphertext();
      } else {
        setCiphertext((byte[])value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case AUTHENTICATEDMESSAGE:
      return getAuthenticatedMessage();

    case CIPHERTEXT:
      return getCiphertext();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case AUTHENTICATEDMESSAGE:
      return isSetAuthenticatedMessage();
    case CIPHERTEXT:
      return isSetCiphertext();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CiphertextMessageStruct)
      return this.equals((CiphertextMessageStruct)that);
    return false;
  }

  public boolean equals(CiphertextMessageStruct that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_authenticatedMessage = true && this.isSetAuthenticatedMessage();
    boolean that_present_authenticatedMessage = true && that.isSetAuthenticatedMessage();
    if (this_present_authenticatedMessage || that_present_authenticatedMessage) {
      if (!(this_present_authenticatedMessage && that_present_authenticatedMessage))
        return false;
      if (!TBaseHelper.equalsNobinary(this.authenticatedMessage, that.authenticatedMessage))
        return false;
    }

    boolean this_present_ciphertext = true && this.isSetCiphertext();
    boolean that_present_ciphertext = true && that.isSetCiphertext();
    if (this_present_ciphertext || that_present_ciphertext) {
      if (!(this_present_ciphertext && that_present_ciphertext))
        return false;
      if (!TBaseHelper.equalsSlow(this.ciphertext, that.ciphertext))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CiphertextMessageStruct other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAuthenticatedMessage()).compareTo(other.isSetAuthenticatedMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(authenticatedMessage, other.authenticatedMessage);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetCiphertext()).compareTo(other.isSetCiphertext());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(ciphertext, other.ciphertext);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case AUTHENTICATEDMESSAGE:
          if (field.type == TType.STRUCT) {
            this.authenticatedMessage = new AuthenticatedMessageStruct();
            this.authenticatedMessage.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CIPHERTEXT:
          if (field.type == TType.STRING) {
            this.ciphertext = iprot.readBinary();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.authenticatedMessage != null) {
      oprot.writeFieldBegin(AUTHENTICATED_MESSAGE_FIELD_DESC);
      this.authenticatedMessage.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.ciphertext != null) {
      oprot.writeFieldBegin(CIPHERTEXT_FIELD_DESC);
      oprot.writeBinary(this.ciphertext);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("CiphertextMessageStruct");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("authenticatedMessage");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getAuthenticatedMessage() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getAuthenticatedMessage(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("ciphertext");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getCiphertext() == null) {
      sb.append("null");
    } else {
        int __ciphertext_size = Math.min(this. getCiphertext().length, 128);
        for (int i = 0; i < __ciphertext_size; i++) {
          if (i != 0) sb.append(" ");
          sb.append(Integer.toHexString(this. getCiphertext()[i]).length() > 1 ? Integer.toHexString(this. getCiphertext()[i]).substring(Integer.toHexString(this. getCiphertext()[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this. getCiphertext()[i]).toUpperCase());
        }
        if (this. getCiphertext().length > 128) sb.append(" ...");
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

